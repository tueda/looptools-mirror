BINDIR = $(HOSTTYPE)/
RCDIR = include/
SHELL = /bin/sh

# Invoking "gmake SHARED=/usr/local/lib" will attempt to build shared
# libraries. /usr/local/lib specifies where the shared libraries will
# finally be placed in.
# However, this is not so much standardized between platforms, so you
# might have to look up your compiler's and linker's flags.

ifdef SHARED
FC += -shared
LDFLAGS = -Wl,-rpath,$(SHARED)
endif

# The following bit is an experimental feature for extended precision
# (which is available on some platforms only). This may seem like brute
# force, but it does help sometimes, e.g. at high energies one gains
# considerable accuracy. For details see the manual.
# So far, I have tested it successfully only on DEC Alpha platforms
# which is why the `if' statement is in place.
# If somebody figures out the correct compiler and/or linker options
# for other platforms, I am happy to include them in the distribution.

ifeq ($(HOSTTYPE),alpha)
R16COMPILE = yes
R16FC = f90 -r16
ifdef SHARED
R16FC += -shared
endif
endif

# array bounds for C0i and D0i in bca
CSTORE = 1000
DSTORE = 500

FFOBJS = ff2dl2.o ffabcd.o ffca0.o ffcb0.o ffcb1.o ffcb2p.o ffcdb0.o \
  ffcc0.o ffcc0p.o ffcc1.o ffcel2.o ffcel3.o ffcel4.o ffcel5.o \
  ffceta.o ffcli2.o ffcrr.o ffcxr.o ffcxs3.o ffcxs4.o ffcxyz.o ffdcc0.o \
  ffdcxs.o ffdel2.o ffdel3.o ffdel4.o ffdel5.o ffdel6.o ffdl2i.o \
  ffdl5p.o ffdxc0.o ffinit.o ffrcvr.o fftran.o ffxb0.o ffxb1.o ffxb2p.o \
  ffxc0.o ffxc0i.o ffxc0p.o ffxc1.o ffxd0.o ffxd0h.o ffxd0i.o ffxd0p.o \
  ffxd1.o ffxdb0.o ffxdbd.o ffxdi.o ffxdpv.o ffxe0.o ffxe1.o ffxf0.o \
  ffxf0h.o ffxli2.o ffxxyz.o

LTOBJS = ffxd0m0.o ffxdb1.o ffcheck.o

AAOBJS = aaxbx.o aaxcx.o aaxdx.o aaxinv.o aacbc.o aaccc.o aacinv.o

OBJS = $(FFOBJS:%=ff/%) $(LTOBJS:%=ff/%) $(AAOBJS:%=ff/%)

DDOBJS = doubledouble/doubledouble.o doubledouble/math.o
DDINCL = doubledouble/doubledouble.h doubledouble/inline.h

TARGETS = $(BINDIR)libff.a $(BINDIR)bca $(BINDIR)libhep.a
ifdef R16COMPILE
TARGETS += $(BINDIR)libffx.a
endif

all: $(TARGETS)
	-mkdir $(RCDIR)
	cp ff/ff.h ff/aa.h src/*.h src/tools.F $(RCDIR)
ifdef R16COMPILE
	cp src/qcomplex.f90 ff/qcomplex.mod $(RCDIR)
	utils/f77290 src/tools.F include/tools.f90
	utils/f77290 src/tools.h include/tools.h90
	utils/f77290 src/defs.h include/defs.h90
	utils/f77290 ff/ff.h include/ff.h90
	utils/f77290 ff/aa.h include/aa.h90
endif

# libff.a: the Fortran library
# libffx.a: the same with ext precision (not available on all platforms)
# bca: the Mma/MathLink implementation (uses stderr for msgs)
# libhep.a: a C++ library containing the tensor routines

.SUFFIXES:
.SUFFIXES: .f .o

ff/ffinit.orig:
	gunzip -c ff.tar.gz | tar xvf -
	cp src/ff*.f ff/
	$(CC) -E -P -x c src/ffcheck.F > ff/ffcheck.f
	utils/patchup

(%.o): %.f
	@cd ff; \
	if [ "$(@F)" = "libff.a" ]; then \
	  set -x; $(FC) -c $(<F); \
	else \
	  [ "$(*F)" != "ffinit" ] && ../utils/f77290 $(<F); \
	  set -x; \
	  $(R16FC) -c $(*F).f90; \
	fi

$(BINDIR)libff.a: ff/ffinit.orig $(BINDIR)libff.a($(OBJS))
	-mkdir $(BINDIR)
ifdef SHARED
	$(FC) -o $(BINDIR)libff.so $(OBJS)
else
	ar cru $@ $(OBJS)
	ranlib $@
endif
	rm -f ff/*.o

ifdef R16COMPILE
utils/f77290: utils/f77290.c
	cd utils; $(CC) -o f77290 f77290.c

ff/qcomplex.o: src/qcomplex.f90
	cd ff; f90 -c ../src/qcomplex.f90

ff/ff.h90: ff/ffinit.orig utils/f77290
	@set -x ; for file in ff/*.h ; do utils/f77290 $$file ; done
	utils/f77290 ff/ffinit.f - | \
	  sed 's/prec[cx] = prec[cx]\*8/&192/g' > ff/ffinit.f90

$(BINDIR)libffx.a: ff/ffinit.orig utils/f77290 ff/qcomplex.o ff/ff.h90 \
  $(BINDIR)libffx.a($(OBJS))
	-mkdir $(BINDIR)
ifdef SHARED
	$(R16FC) -o $(BINDIR)libffx.so $(OBJS) ff/qcomplex.o
else
	ar cru $@ $(OBJS) ff/qcomplex.o
	ranlib $@
endif
	rm -f ff/*90 ff/*.o
endif

src/tensor.o: ff/ffinit.orig src/tensor.F src/tools.h src/defs.h
	cd src ; \
	  cp ../ff/ff.h . ; \
	  $(CC) -E -P -x c -DCSTORE=$(CSTORE) -DDSTORE=$(DSTORE) \
	    tensor.F > tensor.f ; \
	  $(FC) -c tensor.f

$(BINDIR)bca: src/tensor.o src/bca.tm
	-mkdir $(BINDIR)
	CC=utils/ccf ; export CC ; \
	sed "s; cc ; utils/ccf ;g" `which mcc` | sh -s \
	  src/bca.tm src/tensor.o \
	  -o $(BINDIR)bca -O6 \
	  -DCSTORE=$(CSTORE) -DDSTORE=$(DSTORE) \
	  $(LDFLAGS) -L$(BINDIR) -lff

$(BINDIR)bca_static: src/tensor.o src/bca.tm
	-mkdir $(BINDIR)
	CC=utils/ccf ; export CC ; \
	sed "s; cc ; utils/ccf ;g" `which mcc` | sh -s \
	  src/bca.tm src/tensor.o \
	  -o $(BINDIR)bca_static -O6 \
	  -DCSTORE=$(CSTORE) -DDSTORE=$(DSTORE) \
	  -static -L$(BINDIR) -lff

src/ctools.o: src/ctools.cc src/ctools.h $(DDINCL) src/qcomplex.cc
	$(CXX) -Idoubledouble -c -o src/ctools.o src/ctools.cc

$(DDOBJS): %.o: %.cc $(DDINCL)
	$(CXX) -c -o $@ $<

$(BINDIR)libhep.a: src/ctools.o $(DDOBJS)
	-mkdir $(BINDIR)
	ar cru $@ src/ctools.o $(DDOBJS)
	ranlib $@

.PHONY: clean bca libhep

bca: $(BINDIR)bca

bca_static: $(BINDIR)bca_static

libhep: $(BINDIR)libhep.a

clean:
	rm -fr ff src/*.o src/tensor.f src/ff.h doubledouble/*.o

